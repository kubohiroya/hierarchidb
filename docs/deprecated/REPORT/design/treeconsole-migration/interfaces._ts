// TreeConsole Package Interface Definitions
// Uses existing @hierarchidb/api and @hierarchidb/worker implementations

import type {
  TreeNode,
  TreeNodeId,
  TreeNodeType,
  TreeRootNodeId,
  Timestamp
} from '@hierarchidb/core';
import type { WorkerAPI } from '@hierarchidb/api';
import type { ReactNode } from 'react';
import type { 
  RowSelectionState,
  SortingState,
  ColumnFiltersState,
  VisibilityState,
  ColumnOrderState
} from '@tanstack/react-table';

// ============================================================================
// UI Component Props (specific to TreeConsole UI layer)
// ============================================================================

export interface TreeConsoleProps {
  nodeId?: TreeNodeId;
  rootNodeId: TreeRootNodeId;
  expandedNodeIds?: TreeNodeId[];
  enableDragCleanup?: boolean;
  loadingComponent?: ReactNode;
  dialogPaperProps?: Record<string, unknown>;
  consoleName?: string;
}

export interface TreeTableConsolePanelProps {
  treeRootNodeId: TreeRootNodeId;
  nodeId: TreeNodeId;
  displayExpandedNode?: boolean;
  close?: () => void;
  initialRowSelection?: RowSelectionState;
  onRowSelectionChange?: (selection: RowSelectionState) => void;
  enableRowSelection?: boolean;
  hideConsole?: boolean;
  showSearchOnly?: boolean;
  useTrashColumns?: boolean;
  containerWidth?: number;
  containerHeight?: number;
  mode?: "restore" | "dispose";
}

// ============================================================================
// TreeViewController Hook Interface (UI layer state management)
// ============================================================================

export interface UseTreeViewControllerOptions {
  treeRootNodeId: TreeRootNodeId;
  nodeId: TreeNodeId;
  showRoot?: boolean;
  width?: number;
  initialRowSelection?: RowSelectionState;
  onRowSelectionChange?: (selection: RowSelectionState) => void;
  workerService?: WorkerAPI | null;  // Uses existing WorkerAPI
  loading?: boolean;
}

export interface TreeViewController {
  // State
  data: TreeNode[] | undefined;
  currentNode: TreeNode | undefined;
  nodePath: TreeNode[];
  isLoadingNodePath: boolean;
  isNavigating: boolean;
  
  // Selection
  rowSelection: RowSelectionState;
  setRowSelection: (selection: RowSelectionState) => void;
  selectedNodes: TreeNode[];
  
  // Table State
  sorting: SortingState;
  setSorting: (sorting: SortingState) => void;
  columnFilters: ColumnFiltersState;
  setColumnFilters: (filters: ColumnFiltersState) => void;
  columnVisibility: VisibilityState;
  setColumnVisibility: (visibility: VisibilityState) => void;
  columnOrder: ColumnOrderState;
  setColumnOrder: (order: ColumnOrderState) => void;
  
  // Operations (will call WorkerAPI methods internally)
  moveNodes: (nodeIds: TreeNodeId[], targetId: TreeNodeId) => Promise<void>;
  duplicateNodes: (nodeIds: TreeNodeId[]) => Promise<void>;
  deleteNodes: (nodeIds: TreeNodeId[]) => Promise<void>;
  recoverNodes: (nodeIds: TreeNodeId[]) => Promise<void>;
  permanentDeleteNodes: (nodeIds: TreeNodeId[]) => Promise<void>;
  
  // Dialog Operations
  openNodeCreateDialog: (nodeType: TreeNodeType, fromSpeedDial?: boolean) => void;
  openNodeEditDialog: (nodeId: TreeNodeId) => void;
  openNodeDeleteDialog: (nodeIds: TreeNodeId[]) => void;
  
  // Clipboard
  copyNodes: (nodeIds: TreeNodeId[]) => Promise<void>;
  pasteNodes: (targetId: TreeNodeId) => Promise<void>;
  canPaste: boolean;
  
  // Undo/Redo (calls WorkerAPI.undo/redo)
  undo: () => Promise<void>;
  redo: () => Promise<void>;
  canUndo: boolean;
  canRedo: boolean;
  
  // Navigation
  navigateToNode: (nodeId: TreeNodeId) => void;
  navigateUp: () => void;
  
  // Expansion
  expandedNodes: Set<TreeNodeId>;
  toggleNodeExpanded: (nodeId: TreeNodeId) => void;
  expandAll: () => void;
  collapseAll: () => void;
  
  // Import/Export
  exportNodes: (nodeIds: TreeNodeId[]) => Promise<void>;
  importNodes: (file: File, targetId: TreeNodeId) => Promise<void>;
  
  // Messages
  snackbarMessage: { message: string; severity: 'success' | 'error' | 'info' } | null;
  setSnackbarMessage: (message: typeof snackbarMessage) => void;
  resourceReferenceError: { isOpen: boolean; error: ResourceReferenceError | null };
  setResourceReferenceError: (error: typeof resourceReferenceError) => void;
}

// ============================================================================
// Virtual Table Types (UI layer)
// ============================================================================

export interface TreeTableColumn {
  id: string;
  header: string;
  accessorKey?: string;
  cell?: (info: any) => ReactNode;
  enableSorting?: boolean;
  enableFiltering?: boolean;
  size?: number;
  minSize?: number;
  maxSize?: number;
}

export interface TreeTableRow {
  id: TreeNodeId;
  original: TreeNode;
  depth: number;
  isExpanded: boolean;
  canExpand: boolean;
  subRows?: TreeTableRow[];
}

// ============================================================================
// Drag & Drop Types (UI layer)
// ============================================================================

export interface DraggedNode {
  nodeId: TreeNodeId;
  nodeType: TreeNodeType;
  name: string;
}

export interface DropTarget {
  nodeId: TreeNodeId;
  position: 'before' | 'after' | 'inside';
}

// ============================================================================
// Dialog Types (UI layer)
// ============================================================================

export interface NodeCreateDialogProps {
  open: boolean;
  onClose: () => void;
  parentId: TreeNodeId;
  nodeType: TreeNodeType;
  onSuccess?: (nodeId: TreeNodeId) => void;
}

export interface NodeEditDialogProps {
  open: boolean;
  onClose: () => void;
  nodeId: TreeNodeId;
  onSuccess?: () => void;
}

export interface NodeDeleteDialogProps {
  open: boolean;
  onClose: () => void;
  nodeIds: TreeNodeId[];
  onSuccess?: () => void;
}

// ============================================================================
// Tree State Management (UI layer)
// ============================================================================

export interface TreeViewState {
  expandedNodes: Set<TreeNodeId>;
  selectedNodes: Set<TreeNodeId>;
  focusedNode: TreeNodeId | null;
  scrollPosition: number;
  searchQuery: string;
  filters: Map<string, any>;
}

export interface TreeViewStateManager {
  getState(viewId: string): TreeViewState;
  setState(viewId: string, state: Partial<TreeViewState>): void;
  clearState(viewId: string): void;
  persistState(viewId: string): Promise<void>;
  restoreState(viewId: string): Promise<TreeViewState | null>;
}

// ============================================================================
// Error Types (UI layer)
// ============================================================================

export interface ResourceReferenceError extends Error {
  nodeId: TreeNodeId;
  referencingNodes: TreeNodeId[];
  code: 'HAS_INBOUND_REFS';
}

// ============================================================================
// IMPORTANT: Worker API Usage
// ============================================================================
// This package will use the existing WorkerAPI from @hierarchidb/api
// No additional Worker service definitions are needed
// 
// Example usage in TreeConsole components:
//
// import { WorkerAPI } from '@hierarchidb/api';
// import * as Comlink from 'comlink';
// 
// const worker = new Worker(new URL('@hierarchidb/worker', import.meta.url));
// const api = Comlink.wrap<WorkerAPI>(worker);
//
// The WorkerAPI already provides:
// - TreeObservableService (observeNode, observeChildren, observeSubtree, etc.)
// - TreeMutationService (createWorkingCopy, commitWorkingCopy, moveNodes, etc.)
// - TreeQueryService (getNode, getChildren, searchNodes, etc.)
// - All command handling via CommandEnvelope pattern
// ============================================================================