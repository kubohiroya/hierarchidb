import{w as g,r as a}from"./vendor-react-BP9jdMJE.js";import{j as t}from"./jsx-runtime-D_zvdyIk.js";import{W as h}from"./index-SzJX3EJy.js";import{C as j}from"./Container-CEYSW6ch.js";import{T as s,B as c}from"./Box-zDrc8-aq.js";import{B as f}from"./Button-SDpdNXaB.js";import{A as d}from"./Alert-C-Br81AU.js";import"./createSimplePaletteValueFilter-BuD9q6B8.js";import"./assertThisInitialized-C6AqJUPC.js";import"./useThemeProps-BB4YCwI3.js";import"./useSlot-Cr8mcnhD.js";import"./IconButton-DRvuffCM.js";import"./Paper-hI1Q5KHP.js";const b=g(function(){const[n,e]=a.useState("Not started"),[o,l]=a.useState(null),[m,p]=a.useState(null),u=async()=>{e("Initializing..."),l(null);try{e("Getting WorkerAPIClient singleton...");const r=await h.getSingleton();p(r),e("Testing ping..."),await r.ping(),e("Getting API...");const x=r.getAPI();e("Testing API call (getTrees)...");const i=await x.getTrees();e(`Success! Found ${(i==null?void 0:i.length)||0} trees`)}catch(r){console.error("Worker test failed:",r),l(r instanceof Error?r.message:String(r)),e("Failed")}};return t.jsxs(j,{maxWidth:"md",sx:{mt:4},children:[t.jsx(s,{variant:"h4",gutterBottom:!0,children:"Worker Test"}),t.jsx(c,{sx:{my:3},children:t.jsx(f,{variant:"contained",onClick:u,disabled:n==="Initializing...",children:"Test Worker Connection"})}),t.jsxs(c,{sx:{my:2},children:[t.jsx(s,{variant:"h6",children:"Status:"}),t.jsx(s,{color:o?"error":n.includes("Success")?"success.main":"text.primary",children:n})]}),o&&t.jsxs(d,{severity:"error",sx:{mt:2},children:[t.jsx(s,{variant:"h6",children:"Error:"}),t.jsx(s,{children:o})]}),m&&t.jsx(d,{severity:"success",sx:{mt:2},children:t.jsx(s,{children:"WorkerAPIClient instance created successfully!"})}),t.jsx(c,{sx:{mt:4,p:2,backgroundColor:"grey.100",borderRadius:1},children:t.jsx(s,{variant:"caption",component:"pre",sx:{fontFamily:"monospace"},children:`// Debug Info
Status: ${n}
Error: ${o||"None"}
Client: ${m?"Created":"Not created"}
Time: ${new Date().toLocaleTimeString()}`})})]})});export{b as default};
