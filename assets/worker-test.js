import{b as g,a}from"./vendor-react-DCOeofjU.js";import{j as t}from"./jsx-runtime-vjdH2-jS.js";import{W as h}from"./WorkerAPIClient-pGcfw4hP.js";import{C as j}from"./Container-BWHHl0R2.js";import{T as s,B as c}from"./Box-B7f5Nirn.js";import{B as f}from"./Button-DEaX3uky.js";import{A as d}from"./Alert-NxWFql_t.js";import"./logger-Dd_sLh6l.js";import"./DefaultPropsProvider-Dzc6Wkbi.js";import"./createSimplePaletteValueFilter-DzNscr7y.js";import"./createSvgIcon-D-kvQizT.js";const B=g(function(){const[n,r]=a.useState("Not started"),[o,l]=a.useState(null),[m,u]=a.useState(null),p=async()=>{r("Initializing..."),l(null);try{r("Getting WorkerAPIClient singleton...");const e=await h.getSingleton();u(e),r("Testing ping...");const k=await e.ping();r("Getting API...");const x=e.getAPI();r("Testing API call (getTrees)...");const i=await x.getTrees();r(`Success! Found ${(i==null?void 0:i.length)||0} trees`)}catch(e){console.error("Worker test failed:",e),l(e instanceof Error?e.message:String(e)),r("Failed")}};return t.jsxs(j,{maxWidth:"md",sx:{mt:4},children:[t.jsx(s,{variant:"h4",gutterBottom:!0,children:"Worker Test"}),t.jsx(c,{sx:{my:3},children:t.jsx(f,{variant:"contained",onClick:p,disabled:n==="Initializing...",children:"Test Worker Connection"})}),t.jsxs(c,{sx:{my:2},children:[t.jsx(s,{variant:"h6",children:"Status:"}),t.jsx(s,{color:o?"error":n.includes("Success")?"success.main":"text.primary",children:n})]}),o&&t.jsxs(d,{severity:"error",sx:{mt:2},children:[t.jsx(s,{variant:"h6",children:"Error:"}),t.jsx(s,{children:o})]}),m&&t.jsx(d,{severity:"success",sx:{mt:2},children:t.jsx(s,{children:"WorkerAPIClient instance created successfully!"})}),t.jsx(c,{sx:{mt:4,p:2,backgroundColor:"grey.100",borderRadius:1},children:t.jsx(s,{variant:"caption",component:"pre",sx:{fontFamily:"monospace"},children:`// Debug Info
Status: ${n}
Error: ${o||"None"}
Client: ${m?"Created":"Not created"}
Time: ${new Date().toLocaleTimeString()}`})})]})});export{B as default};
